pipeline {
    agent {
        node {
            label 'slave_1'
        }
    }

    tools {
        maven 'MAVEN_HOME'
        jdk 'JAVA_HOME'
    }

    environment {
        DOCKER_IMAGE = 'webapp-app-tomcat'
        DOCKER_TAG = 'latest'
        DOCKER_REPO = 'tarunkumar2512'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        GIT_REPO = 'https://github.com/Tarun25-ui/Project-Management.git'
        GIT_BRANCH = 'master'
        ENV_NAME = 'dev-ns'   // Change to 'sbox-ns' or 'prod-ns' for other environments
    }

    stages {
        stage('Pre-Build Step') {
            steps {
                sh 'echo "Pre Build Step"'
            }
        }

        stage('Git Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                ])
            }
        }

        stage('Build WAR') {
            steps {
                sh '''
                    mvn clean package -DskipTests
                    WAR_FILE=$(ls target/*.war | head -n 1)
                    mv "$WAR_FILE" target/webapp.war
                    mkdir -p ${WORKSPACE}/Docker-Kubernetes
                    cp target/webapp.war ${WORKSPACE}/Docker-Kubernetes/
                '''
            }
        }

        stage('Unit Test') {
            steps {
                echo 'Running Unit Testing'
                sh 'mvn test'
            }
        }

        stage('Update Local Repository') {
            steps {
                echo 'Updating local m2 repository'
                sh 'mvn install'
            }
        }

        /* ---- SONARQUBE STAGE COMMENTED ----
        stage('Static Code Analysis') {
            environment {
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps {
                echo 'Running Static Code Analysis'
                withSonarQubeEnv('SONAR_HOME') {
                    sh '${scannerHome}/bin/sonar-scanner'
                }
            }
        }
        -------------------------------------- */

        stage('Jfrog Artifact Upload') {
            steps {
                rtUpload(
                    serverId: 'artifactory',
                    spec: '''{
                        "files": [
                            {
                                "pattern": "*.war",
                                "target": "local-snapshot-repo"
                            }
                        ]
                    }'''
                )
            }
        }

        stage('Docker Build') {
            steps {
                sh "docker build -t ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG} -f ${WORKSPACE}/Docker-Kubernetes/Dockerfile ."
            }
        }

        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                }
            }
        }

        stage('Kubernetes Deployment') {
            parallel {
                stage('Kubernetes Dev') {
                    when { expression { "${ENV_NAME}" == 'dev-ns' } }
                    steps {
                        sh '''
                            kubectl apply -f ${WORKSPACE}/Docker-Kubernetes/deployment.yaml -n "$ENV_NAME"
                            sleep 10
                            kubectl apply -f ${WORKSPACE}/Docker-Kubernetes/service.yaml -n "$ENV_NAME"
                        '''
                    }
                }
                stage('Kubernetes SBOX') {
                    when { expression { "${ENV_NAME}" == 'sbox-ns' } }
                    steps {
                        sh '''
                            kubectl apply -f ${WORKSPACE}/Docker-Kubernetes/deployment.yaml -n "$ENV_NAME"
                            sleep 10
                            kubectl apply -f ${WORKSPACE}/Docker-Kubernetes/service.yaml -n "$ENV_NAME"
                        '''
                    }
                }
                stage('Kubernetes Prod') {
                    when { expression { "${ENV_NAME}" == 'prod-ns' } }
                    steps {
                        sh '''
                            kubectl apply -f ${WORKSPACE}/Docker-Kubernetes/deployment.yaml -n "$ENV_NAME"
                            sleep 10
                            kubectl apply -f ${WORKSPACE}/Docker-Kubernetes/service.yaml -n "$ENV_NAME"
                        '''
                    }
                }
            }
        }

        stage('Deployment Validation') {
            steps {
                sh '''
                    sleep 10
                    kubectl get all -n "$ENV_NAME"
                '''
            }
        }

        stage('Post-Build Step') {
            steps {
                echo "Pipeline Completed Successfully"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
