pipeline {
    agent {
        node {
            label 'slave_1'
        }
    }

    tools {
        maven 'MAVEN_HOME'
        jdk 'JAVA_HOME'
        git 'GIT_HOME'
    }

    stages {
        stage('Pre-Build Step') {
            steps {
                echo "Pre Build Step: Webhook triggered the pipeline on push event"
            }
        }

        stage('Git Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                        credentialsId: 'github access',
                        url: 'https://github.com/devopscloudtrainer25/Project-Management.git'
                    ]]
                ])
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Unit Test') {
            steps {
                echo 'Running Unit Tests'
                sh 'mvn test'
            }
        }

        stage('Update Local Repository') {
            steps {
                sh '''
                   mvn install
                   rm -rf target/webapp.war
                   mv target/*.war target/webapp.war
                '''
            }
        }

        stage('Static Code Analysis') {
            environment {
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps {
                echo 'Running Static Code Analysis with SonarQube'
                withSonarQubeEnv('SONAR_HOME') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh script: """
                          ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=pipeline-project \
                            -Dsonar.projectName=Pipeline-project \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=./src \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.token=$SONAR_TOKEN
                        """, returnStdout: false
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Jfrog Artifact Upload') {
            steps {
                rtUpload (
                    serverId: 'artifactory',
                    spec: '''{
                          "files": [
                            {
                              "pattern": "*.war",
                              "target": "local-snapshot-repo"
                            }
                          ]
                    }'''
                )
            }
        }

        stage('Tomcat Deployment') {
            steps {
                script {
                    deploy adapters: [
                        tomcat9(
                            credentialsId: 'tomcat-credentials',
                            path: '',
                            url: 'http://13.201.1.24:8080'
                        )
                    ],
                    contextPath: '/ecommerce',
                    onFailure: false,
                    war: 'target/webapp.war'
                }
            }
        }

        stage('Post-Build Step') {
            steps {
                echo "Successful Pipeline for Tomcat Deployment"
            }
        }
    }
}
